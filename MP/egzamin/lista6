#lang plait

(define (my-map f xs)
  (if (empty? xs)
      '()
      (cons (f (first xs)) (my-map f (rest xs)))))

(my-map (lambda (x) (* x x)) '(1 2 3))

(define (my-append xs ys)
  (if (empty? xs)
      ys
      (cons (first xs) (my-append (rest xs) ys))))

(my-append (list 1 2 3) (list 4 5 6))

( define-type ( NNF 'v)
   ( nnf-lit [ polarity : Boolean ] [ var : 'v ])
   ( nnf-conj [l : ( NNF 'v)] [r : ( NNF 'v) ])
   ( nnf-disj [l : ( NNF 'v)] [r : ( NNF 'v) ]) )


(define (neg-nnf psi)
  (cond [(nnf-lit? psi) (nnf-lit (not (nnf-lit-polarity psi)) (nnf-lit-var psi))]
        [(nnf-conj? psi) (nnf-disj (neg-nnf (nnf-conj-l psi)) (neg-nnf (nnf-conj-r psi)))]
        [else (nnf-conj (neg-nnf (nnf-disj-l psi)) (neg-nnf (nnf-disj-r psi)))]
        ))

(define (eval-nnf s psi)
  (cond [(nnf-lit? psi)
         (if (nnf-lit-polarity psi)
             (s (nnf-lit-var psi))
             (not (s (nnf-lit-var psi))))]
        [(nnf-conj? psi) (and (eval-nnf s (nnf-conj-l psi)) (eval-nnf s (nnf-conj-r psi)))]
        [(nnf-disj? psi) (or (eval-nnf s (nnf-disj-l psi)) (eval-nnf s (nnf-disj-r psi)))]
        ))

( define-type ( Formula 'v)
   ( var [ var : 'v ])
   ( neg [f : ( Formula 'v) ])
   ( conj [l : ( Formula 'v)] [r : ( Formula 'v) ])
   ( disj [l : ( Formula 'v)] [r : ( Formula 'v) ]) )

(define (to-nnf-help psi)
  (type-case (Formula 'v) psi
    [(var v) (nnf-lit #f v)]
    [(conj l r) (nnf-disj (to-nnf-help l) (to-nnf-help r))]
    [(disj l r) (nnf-conj (to-nnf-help l) (to-nnf-help r))]
    [(neg f) (to-nnf f)]))

(define (to-nnf psi)
  (type-case (Formula 'v) psi
    [(var v) (nnf-lit #t v)]
    [(conj l r) (nnf-conj (to-nnf l) (to-nnf r))]
    [(disj l r) (nnf-disj (to-nnf l) (to-nnf r))]
    [(neg f) (to-nnf-help f)]))

(define (eval-formula s psi)
  (type-case (Formula 'v) psi
    [(var v) (s v)]
    [(conj l r) (and (eval-formula s l) (eval-formula s r))]
    [(disj l r) (or (eval-formula s l) (eval-formula s r))]
    [(neg f) (not (eval-formula s f))]))

(define (sorted? xs)
  (cond [(empty? xs) #t]
        [(empty? (rest xs)) #t]
        [(<= (first xs) (second xs)) (sorted? (rest xs))]
        [else #f]))

(define (insert x xs)
  (cond [(empty? xs) (cons x empty)]
        [(< x (first xs)) (cons x xs)]
        [(>= x (first xs)) (cons (first xs) (insert x (rest xs)))]))


(sorted? (list 1 3 4 1 3))
(sorted? (list 1 3 4 5 6))
(insert 2 '(3))