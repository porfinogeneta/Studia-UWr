#lang racket
 (require compatibility/mlist)

;z1
(struct mqueue
  ([front #:mutable]
   [back  #:mutable]))

(define (cycle! xs)
  (define fs xs)
  (define (it ls)
    (if (empty? (mcdr ls))
              (set-mcdr! ls fs)
              (cycle! (mcdr ls))))
  (it xs))

;z2
(define (mreverse! xs)
  (define (it cur prev)
    (if (empty? cur)
        prev
        (let [(nxt (mcdr cur))]
          (set-mcdr! cur prev)
          (it nxt cur))))
  (it xs '()))

(define mlist2 (list->mlist '(5 6 7 8 9)))
;(cycle! mlist2)
(mreverse! mlist2)

;z3
#;(struct mqueue
  ([front #:mutable]
   [back  #:mutable]))

(struct node
  ([prev #:mutable]
   [elem #:mutable]
   [next #:mutable]))

(define (mqueue-empty? q)
  (and (null? (mqueue-front q))
       (null? (mqueue-back  q))))

(define (nonempty-mqueue? q)
  (and (mqueue? q) (mpair? (mqueue-front q))))

(define (make-mqueue)
  (mqueue null null))

(define (mqueue-push-front q x)
  (define p (mcons (node null x (mqueue-front q))))
  (if (mqueue-empty? q)
      (set-mqueue-front! q p)
      (set-node-prev! (mqueue-front q) p))
  (set-mqueue-front! q p))

(define (mqueue-push-back q x)
  (define p (node (mqueue-back q) x null))
  (if (mqueue-empty? q)
      (set-mqueue-front! q p)
      (set-node-next! (mqueue-back q) p))
  (set-mqueue-back! q p))

(define (mqueue-pop-front q)
  (define p (mqueue-front q))
  (set-mqueue-front! q (node-next p))
  (set-node-prev! (mqueue-front q) null)
  (if (null? (node-next p))
      (begin
        (set-mqueue-back! q null)
        (node-elem p))
      (node-elem p))
  )

(define (mqueue-pop-back q)
  (define p (mqueue-back q))
  (set-mqueue-back! q (node-prev p))
  (set-node-next! (mqueue-back q) null)
  (if (null? (node-prev p))
      (begin
        (set-mqueue-front! q null)
        (node-elem p p))
      (node-elem p))
  )


(define/contract (mqueue-pop q)
  (-> nonempty-mqueue? any/c)
  (define p (mqueue-front q))
  (set-mqueue-front! q (mcdr p))
  (if (null? (mcdr p))
      (begin
        (set-mqueue-back! q null)
        (mcar p))
      (mcar p)))

(define (mqueue-join q1 q2)
  (set-mcdr! (mqueue-back q1) (mqueue-front q2))
  (set-mqueue-back! q1 (mqueue-back q2))
  (set-mqueue-front! q2 null)
  (set-mqueue-back!  q2 null))

























