#lang plait

(module+ test
  (print-only-errors #t))

;; abstract syntax -------------------------------

(define-type Op
  (add)
  (sub)
  (mul)
  (div))

(define-type Exp
  (numE [n : Number])
  (opE [op : Op] [args : (Listof Exp)])) ;mamy teraz listę wyrażeń

;; parse ----------------------------------------

(define (parse [s : S-Exp]) : Exp
  (cond
    [(s-exp-match? `NUMBER s) ;s-exp to liczba
     (numE (s-exp->number s))] ;zwracamy gałąź drzewa
    [(s-exp-match? `{SYMBOL ANY ...} s) ;mam jakieś bardziej złożone wyrażenie
     (opE (parse-op (s-exp->symbol (first (s-exp->list s))));parsujemy operator
          ;parsowanie pozostałej części wyrażeń, konwersja na listę i na każdym elemencie parsowanie
          (map (lambda (exp) (parse exp)) (rest (s-exp->list s))))]
    [else (error 'parse "invalid input")]))

(define (parse-op [op : Symbol]) : Op
  (cond
    [(eq? op '+) (add)]
    [(eq? op '-) (sub)]
    [(eq? op '*) (mul)]
    [(eq? op '/) (div)]
    [else (error 'parse "unknown operator")]))
                 
(module+ test
  (test (parse `2)
        (numE 2))
  (test (parse `{+ 2 1})
        (opE (add) (list (numE 2) (numE 1))))
  (test (parse `{* 3 4})
        (opE (mul) (list (numE 3) (numE 4))))
  (test (parse `{+ {* 3 4} 8})
        (opE (add)
             (list (opE (mul) (list (numE 3) (numE 4)))
             (numE 8))))
  (test/exn (parse `{{+ 1 2}})
            "invalid input")
  (test (parse `{+ 1})
            (opE (add) (list (numE 1))))
  (test/exn (parse `{^ 1 2})
            "unknown operator"))
  
;; eval --------------------------------------

(define-type-alias Value Number)

(define (apply op args)
  (cond
    [(empty? args)
     (cond
       [(or (equal? op +) (equal? op -)) 0]
       [(or (equal? op *) (equal? op /)) 1]
       )
     ]
    [else (foldl op (first args) (rest args))] ;na każdym elemencie wykonujemy daną funkcję
    )
  )

;zdefiniowanie czym konkretnie są operatory, chcemy zwracać funkcję Listof N -> N
(define (op->proc [op : Op]) : ((Listof Value) -> Value)
  (type-case Op op
    [(add) (lambda (args) (apply + args))] ;na liście stosujemy lambdę
    [(sub) (lambda (args) (apply - args))]
    [(mul) (lambda (args) (apply * args))]
    [(div) (lambda (args) (apply / args))]))

;ewaluacja wyrażenia
(define (eval [e : Exp]) : Value
  (type-case Exp e
    [(numE n) n] ;albo liczba
    [(opE o args) ((op->proc o) (map eval args))])) ;albo jakaś bardziej złożona forma, wtedy mapujemy

;uruchomienie funkcji oblicza się do jakiejś wartości, parsujemy, potem ewaluacja
(define (run [e : S-Exp]) : Value
  (eval (parse e)))

(module+ test
  (test (run `2)
        2)
  (test (run `{+ 2})
        2
        )
  (test (run `{+ })
        0
        )
  (test (run `{+ 1 2 3})
        6
        )
  (test (run `{* 1})
        1)
  (test (run `{/ 2})
        2)
  (test (run `{/})
        1)
  (test (run `{+ {* 2 3} {+ 5 8}})
        19))

;; printer ———————————————————————————————————-

(define (print-value [v : Value]) : Void
  (display v))

(define (main [e : S-Exp]) : Void
  (print-value (eval (parse e))))
