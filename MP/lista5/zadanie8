#lang plait


( define-type Prop
( var [ v : String ])
( conj [ l : Prop ] [r : Prop ])
( disj [ l : Prop ] [r : Prop ])
( neg [ f : Prop ]))


(define (eval dict prop)
  (cond
    ; jak prop jest zmienną, sięgam do zwróconej przez Optionof wartości (użycie some-v)
    [(var? prop) (some-v  (hash-ref dict (var-v prop) ) ) ]
    [(conj? prop) (and (eval dict (conj-l prop)) (eval dict (conj-r prop)) ) ]
    [(disj? prop)  (or (eval dict (disj-l prop)) (eval dict (disj-r prop) )) ]
    [else  (not (eval dict (neg-f prop)))]
        )
  )

(define dict1 (hash  (list (pair "a" #f) (pair "b" #f) (pair "c" #f) )))

(define prop1 (conj (disj (var "a") (var "b") ) (neg (var "c"))  ))

(eval dict1 prop1)