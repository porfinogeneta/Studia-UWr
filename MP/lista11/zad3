#lang plait

(module+ test
  (print-only-errors #t))

;; abstract syntax -------------------------------

(define-type Op
  (add) (sub) (mul) (div) (eql) (leq))


(define-type Exp
  (numE [n : Number])
  (opE [op : Op] [l : Exp] [r : Exp])
  (ifE [b : Exp] [l : Exp] [r : Exp])
  (varE [x : Symbol])
  (letE [bindings : (Listof (Symbol * Exp))] [e2 : Exp]) ;let z możliwością dodawania wielu zmiennych
  (let*E [bindins : (Listof (Symbol * Exp))] [e2 : Exp]) ;let, w którym licząc kolejne zmienne mamy dostęp do ich poprzedników
  )

;; parse ----------------------------------------

(define (parse [s : S-Exp]) : Exp
  (cond
    [(s-exp-match? `NUMBER s)
     (numE (s-exp->number s))]
    ;LET
    [(s-exp-match? `(let ((SYMBOL ANY) ...) ANY) s)
      (letE (map
             (lambda (binding)
               (pair (s-exp->symbol (first (s-exp->list binding))) (parse (second (s-exp->list binding))))) ;nazwa zmiennej + sparsowana jej wartość
             (s-exp->list (second (s-exp->list s)))) ;lista binding'ów
            (parse (third (s-exp->list s))))]
    ;LET*, analogicznie do LET
    [(s-exp-match? `(let* ((SYMBOL ANY) ...) ANY) s)
      (let*E (map
             (lambda (binding)
               (pair (s-exp->symbol (first (s-exp->list binding))) (parse (second (s-exp->list binding))))) ;nazwa zmiennej + sparsowana jej wartość
             (s-exp->list (second (s-exp->list s)))) ;lista binding'ów
            (parse (third (s-exp->list s))))]


    [(s-exp-match? `{SYMBOL ANY ANY} s)
     (opE (parse-op (s-exp->symbol (first (s-exp->list s))))
          (parse (second (s-exp->list s)))
          (parse (third (s-exp->list s))))]
    [(s-exp-match? `{if ANY ANY ANY} s)
     (ifE (parse (second (s-exp->list s)))
          (parse (third (s-exp->list s)))
          (parse (fourth (s-exp->list s))))]
    [(s-exp-match? `SYMBOL s)
     (varE (s-exp->symbol s))]
     
     [else (error 'parse "invalid input")]))


(define (parse-op [op : Symbol]) : Op
  (cond
    [(eq? op '+) (add)]
    [(eq? op '-) (sub)]
    [(eq? op '*) (mul)]
    [(eq? op '/) (div)]
    [(eq? op '=) (eql)]
    [(eq? op '<=) (leq)]
    [else (error op "unknown operator")]
    ))
                
(module+ test
  (test (parse `2)
        (numE 2))
  (test (parse `{+ 2 1})
        (opE (add) (numE 2) (numE 1)))
  (test (parse `{* 3 4})
        (opE (mul) (numE 3) (numE 4)))
  (test (parse `{+ {* 3 4} 8})
        (opE (add)
             (opE (mul) (numE 3) (numE 4))
             (numE 8)))
  (test (parse `{if {= 0 1} {* 3 4} 8})
        (ifE (opE (eql) (numE 0) (numE 1))
             (opE (mul) (numE 3) (numE 4))
             (numE 8)))
  (test/exn (parse `{{+ 1 2}})
            "invalid input")
  (test/exn (parse `{+ 1})
            "invalid input")
  (test/exn (parse `{^ 1 2})
            "unknown operator")
  (test (parse `{let {{x 1}} {+ x 1}})
        (letE (list (values 'x (numE 1))) (opE (add) (varE 'x) (numE 1)))))

;; eval --------------------------------------
;(letE (list (values 'x (numE 1))) (opE (add) (varE 'x) (numE 1)))
;; values

(define-type Value
  (numV [n : Number])
  (boolV [b : Boolean]))

;; primitive operations

(define (op-num-num->proc [f : (Number Number -> Number)]) : (Value Value -> Value)
  (λ (v1 v2)
    (type-case Value v1
      [(numV n1)
       (type-case Value v2
         [(numV n2)
          (numV (f n1 n2))]
         [else
          (error 'eval "type error")])]
      [else
       (error 'eval "type error")])))

(define (op-num-bool->proc [f : (Number Number -> Boolean)]) : (Value Value -> Value)
  (λ (v1 v2)
    (type-case Value v1
      [(numV n1)
       (type-case Value v2
         [(numV n2)
          (boolV (f n1 n2))]
         [else
          (error 'eval "type error")])]
      [else
       (error 'eval "type error")])))

(define (op->proc [op : Op]) : (Value Value -> Value)
  (type-case Op op
    [(add) (op-num-num->proc +)]
    [(sub) (op-num-num->proc -)]
    [(mul) (op-num-num->proc *)]
    [(div) (op-num-num->proc /)]
    [(eql) (op-num-bool->proc =)]
    [(leq) (op-num-bool->proc <=)]))

;; environments

(define-type Binding
  (bind [name : Symbol]
        [val : Value]))

(define-type-alias Env (Listof Binding))

(define mt-env empty)

;funkcja do złączania dwóch list w jedną
(define (bind-both [res : (Listof Binding)] lst1 lst2 len)
  (if (empty? lst1)
      res
      (bind-both (cons (bind (first lst1) (first lst2)) res) ;dołączamy do res nasz nowy binding
                 (rest lst1) (rest lst2) len ) ;idziemy do reszty listy
      )
  )

;rozszerzamy środowisko, dla let
(define (extend-env [env : Env] [vars : (Listof Symbol)] [values : (Listof Value)]) : Env
  (append
   (bind-both '() vars values (length vars)) ;musi być taka kolejność, bo na samym początku listy chcemy mieć to co będziemy ewaluować jako pierwsze
   env   
   )
  )

;wyszukiwanie w środowisku
(define (lookup-env [n : Symbol] [env : Env]) : Value
  (type-case (Listof Binding) env
    [empty (error n "unbound variable")]
    [(cons b rst-env) (cond
                        [(eq? n (bind-name b))
                         (bind-val b)]
                        [else (lookup-env n rst-env)])]))

;; evaluation function

(define (eval [e : Exp] [env : Env]) : Value
  (type-case Exp e
    [(numE n) (numV n)]
    [(opE o l r) ((op->proc o) (eval l env) (eval r env))]
    [(ifE b l r)
     (type-case Value (eval b env)
       [(boolV v)
        (if v (eval l env) (eval r env))]
       [else
        (error 'eval "type error")])]
    [(varE x)
     (lookup-env x env)]
    [(letE bnds e2) ;teraz mamy listę zmiennych
     (let (
           [values (map (lambda (binding) (eval (snd binding) env)) bnds)] ;lista wyrażeń definiujących zmienne ;snd i fst pierwszy i drugi element w parze
           [vars (map (lambda (binding) (fst binding)) bnds)] ;lista zmiennych
           )
       (eval e2 (extend-env env vars values)))]
    [(let*E bnds e2)
     (let ([new-env (eval-let*-bindings bnds env)]) ;robimy nowe środowisko, z już policzonymi wartościami, i dopiero na nich robimy ewaluację
       (eval e2 new-env)
       )
     ]
    )
  )

;funkcja, która dorzuci policzone zadeklarowane zmienne do środowiska
(define (eval-let*-bindings [bindings : (Listof (Symbol * Exp))] [env : Env]) : Env
  (if (empty? bindings)
      env
      (let* ([binding (first bindings)]
             [variable (fst binding)]
             [new-exp (snd binding)]
             [value (eval new-exp env)]
             )
        (eval-let*-bindings (rest bindings) (extend-env env (list variable) (list value)))
        )
      )
  )

(letE (list (values 'x (numE 1)) (values 'y (opE (add) (varE 'x) (numE 1)))) (opE (add) (varE 'x) (varE 'y)))

(letE (list (values 'x (numE 1))) (opE (add) (varE 'x) (numE 1)))

(define (run [e : S-Exp]) : Value
  (eval (parse e) mt-env))

(module+ test
  ;let
  
  (test (run `{let {{x 1}} {+ x 1}})
        (numV 2))
  (test (run `{let {{x 1}} {+ x {let {{y 2}} {* x y}}}})
        (numV 3))
  (test (run `{let {{x 1}}
                {+ x {let {{x 1}} {+ x 1}
                       }}})
        (numV 3))
  (test (run `{let {{x 1}} {+ x 1}})
        (numV 2))
  (test (run `{let {{x 1} {y 2}} {+ x y}})
        (numV 3))
  (test (run `{let {{x 1}} {+ x {let {{y 2}} {* x y}}}})
        (numV 3))
  (test (run `{let {{x 1}}
                {+ x {let {{x 1}} {+ x 1}
                       }}})
        (numV 3))
  (test (run `{let {{x 1} {y 2} {z 3}} {+ x {+ y z}}})
        (numV 6))
  (test (run `{let {{x 1}}
                {+ x {let {{y 2}} {+ {* x y} 1}
                     }}})
        (numV 4))

  ;let*

  (test (run `{
                let* {
                  {x 1}
                  {y {+ x 1}}
                } 
                {+ x y}
              })
        (numV 3))
  ;; Test 1
  (test (run `{
                let* {
                  {x 2}
                  {y {* x 3}}
                  {z {+ y 4}}
                } 
                {+ x {+ y z}}
              })
        (numV 18))

  ;; Test 2
  (test (run `{
                let* {
                  {a 6}
                  {b {- a 1}}
                  {c {/ a 2}}
                }
                {+ a {+ b c}}
              })
        (numV 14))

  ;; Test 3
  (test (run `{
                let* {
                  {m 4}
                  {n {+ m {- m 1}}}
                }
                {if {= n 7} {+ m n} 0}
              })
        (numV 11))

  )




;; printer ———————————————————————————————————-

(define (value->string [v : Value]) : String
  (type-case Value v
    [(numV n) (to-string n)]
    [(boolV b) (if b "true" "false")]))

(define (print-value [v : Value]) : Void
  (display (value->string v)))

(define (main [e : S-Exp]) : Void
  (print-value (eval (parse e) mt-env)))
