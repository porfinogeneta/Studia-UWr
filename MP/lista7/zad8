#lang racket

;kogo obwinić
(define (raise-contract-violation pol val)
  (error "Contract violation\nBlaming:"
                (if pol 'Programmer 'User)))

;struct do konktraktów
(struct contract [wrap])

;kontrakt i zgłaszanie błędów
(define (wrap-contract c v)
  (wrap-with-polarity #t c v))

;w przypadku polarity #f,
;checemy zwrócić wartość, polarity #f oznacza,
;że wartość pochodzi od użytkownika
(define (wrap-with-polarity pol c v)
  (if (contract? c)
      (if pol
          ((contract-wrap c) pol v)
          v)
      (if (c v)
          v
          (raise-contract-violation pol v))))

(define (wrap-with-polarity pol c v)
  (if (contract? c)
      (if pol
          ((contract-wrap c) pol v)
          (if (procedure? v)
              v
              (raise-contract-violation pol v))
          )
      )
      (if (c v)
          v
          (raise-contract-violation pol v)))

;zdefiniowanie ogólnego kontraktu
(define any/c (contract (lambda (pol v) v)))

;kontrakt ogólny, zwracamy 42
(define v (wrap-contract any/c 42))

;zdefiniowanie kontraktu ogólnego funkcji ->/c
(define (->/c . cs)
  (define arity (- (length cs) 1))
  (define val/c (last cs))
  (define arg/cs (take cs arity))
  (define (wrap pol f)
    (lambda xs
      (define args
        (map (curry wrap-with-polarity (not pol))
             arg/cs
             xs))
      (wrap-with-polarity pol val/c (apply f args))))
  (contract wrap))

;użycie ogólnego kontraktu
(define id
  (wrap-contract (->/c boolean? boolean?)
  (lambda (x) x)))

;kontrakt dla list
(define (list/c c)
  (define (wrap pol xs)
    (if (list? xs)
        (map (curry wrap-with-polarity pol c) xs)
        (raise-contract-violation pol xs)))
  (contract wrap))

(struct box [tag val])
 
(define (box/c tag)
  (define (wrap pol val)
    (if pol
        (if (and (box? val) (eq? tag (box-tag val)))
            (box-val val)
            (raise-contract-violation pol val))
        (box tag val)))
  (contract wrap))

(define (parametric/c body)
  (define arity (procedure-arity body));ile jest argumentów
  (define cs (map (lambda (i) (box/c (gensym))) (range arity)));lista kontraktów, na początku dajemy placeholdery w postaci gensym
  (apply body cs));na ciele funkcji aplikujemy kontrakty

(define map-contracted
  (wrap-contract
   (parametric/c (lambda [a b]
                   (->/c (->/c a b) (list/c a) (list/c b))))
    map))

;kontrakt parametryczny jest na pozycji negatywnej, czyli sprawdza input do funkcji
( define bar
   ( wrap-contract
     (->/c ( parametric/c ( lambda [a] (->/c a a))) number?)
     ( lambda (f) (f 42) )))

( bar identity )

