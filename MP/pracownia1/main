#lang racket



;nazwa i typ danych w kolumnach
(define-struct column-info (name type) #:transparent)

;schema pierwsza lista, rows druga lista
(define-struct table (schema rows) #:transparent)

(define countries
  (table
   (list (column-info 'country 'string)
         (column-info 'population 'number))
   (list (list "Poland" 38)
         (list "Germany" 83)
         (list "France" 67)
         (list "Spain" 47))))

(define cities
  (table
   (list (column-info 'city    'string)
         (column-info 'country 'string)
         (column-info 'area    'number)
         (column-info 'capital 'boolean))
   (list (list "Wrocław" "Poland"  293 #f)
         (list "Warsaw"  "Poland"  517 #t)
         (list "Poznań"  "Poland"  262 #f)
         (list "Berlin"  "Germany" 892 #t)
         (list "Munich"  "Germany" 310 #f)
         (list "Paris"   "France"  105 #t)
         (list "Rennes"  "France"   50 #f))))


; wskazanie indexu
(define (indexof x xs i)
  (if (null? xs)
      -1
      (if (equal? (first xs) x)
          i
          (indexof x (rest xs) (+ 1 i))
          )
      )
  )

; znajdziemy indeksy tych samych kolumn
(define (indexof-same schema1 schema2 acc)
  (if (null? schema1)
      acc
      (if (member (first schema1) schema2)
          (indexof-same (rest schema1) schema2 (cons (indexof (first schema1) schema2 0) acc))
          (indexof-same (rest schema1) schema2 acc)
          )
      )
  )

; map przekazująca również index wywołania
;tworzy pary f(elem, index) reszta listy
(define (map-index f lst)
  (define (iter i xs acc)
    (if (null? xs)
        ;odracamy akumulator, wtedy elementy będą po kolei
        (reverse acc)
        (iter (+ i 1) (rest xs) (cons (f (first xs) i) acc))
        )
    )
  (iter 0 lst '())
  )

;czy można połączyć wiersz
(define (merge-able row1 row2 same-cols1 same-cols2)
  (map-index (lambda (idx i)
               ;porównanie wartości w opowiednich kolumnach
              (equal? (list-ref row1 (list-ref same-cols1 i) ) (list-ref row2 (list-ref same-cols2 i) ))
               )same-cols1
  ) )


(define (row-columnless row idx-cols)
  (define (keep? idx) (not (member idx idx-cols)))
  (let loop ([row row]
             [idx 0]
             [result '()])
    (cond
      [(null? row) (reverse result)]
      [(keep? idx) (loop (cdr row) (+ idx 1) (cons (car row) result))]
      [else (loop (cdr row) (+ idx 1) result)])))



(define (merge-rows row1 row2 same-cols1 same-cols2)
  (if (merge-able row1 row2 same-cols1 same-cols2)
      (append row1 (row-columnless row2 same-cols2))
      '()
      )
  ) 

;na której pozycji w drugiej tabeli powtarzają się kolumny
(indexof-same (table-schema cities) (table-schema countries) '())

(define (table-natural-join tab1 tab2)
  (let* (
        [schema1 (table-schema tab1)]
        [schema2 (table-schema tab2)]
        [same-cols2 (indexof-same schema1 schema2 '())]
        [same-cols1 (indexof-same schema2 schema1 '())]
        [merged-schema (append schema1 (filter (lambda (col2) (not (member col2 schema1)) ) schema2) )]
        [rows1 (table-rows tab1)]
        [rows2 (table-rows tab2)] 
        [merged-rows
         (map
     (lambda (row1)
       (map
        (lambda (row2)
          ;połączenie wierszy jeśli są równe w odpowiedniej kolumnie
          (merge-rows row1 row2 same-cols1 same-cols2) 
          )
        rows2) )
         rows1)
         ]
        )
    (table merged-schema merged-rows)
    )
  )

( table-natural-join cities countries )









