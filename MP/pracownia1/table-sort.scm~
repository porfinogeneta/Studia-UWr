#lang racket



;nazwa i typ danych w kolumnach
(define-struct column-info (name type) #:transparent)

;schema pierwsza lista, rows druga lista
(define-struct table (schema rows) #:transparent)

(define countries
  (table
   (list (column-info 'country 'string)
         (column-info 'population 'number))
   (list (list "Poland" 38)
         (list "Germany" 83)
         (list "France" 67)
         (list "Spain" 47))))

(define cities
  (table
   (list (column-info 'city    'string)
         (column-info 'country 'string)
         (column-info 'area    'number)
         (column-info 'capital 'boolean))
   (list (list "Wrocław" "Poland"  293 #f)
         (list "Warsaw"  "Poland"  517 #t)
         (list "Poznań"  "Poland"  262 #f)
         (list "Berlin"  "Germany" 892 #t)
         (list "Munich"  "Germany" 310 #f)
         (list "Paris"   "France"  105 #t)
         (list "Rennes"  "France"   50 #f))))


(define (schema-names schema)
  (map (lambda (c) (column-info-name c)) schema))

; wskazanie indexu
(define (indexof x xs i)
  (if (null? xs)
      -1
      (if (eq? (first xs) x)
          i
          (indexof x (rest xs) (+ 1 i))
          )
      )
  )


;utwórz listę tylko tych nazw, które są w nazwach kolumn
;będzie to index wystąpienia w podstawowej tabeli
(define (filter-cols cols table)
  (let (
        (schema-names (schema-names (table-schema table)))
        )
    ;filtruję i aplikuję funkcję
    (filter-map
     (lambda (c)
       (if (member c schema-names)
           (indexof c schema-names 0)
           #f
       )

            ) cols)))


; cols to indexy kolumn
(define (extract-sorting-values row cols)
  (map (lambda (index) (list-ref row index) ) cols)
  )

;funkcja umożliwiająca porównywanie różnych typów
(define (comparator a b)
  (cond ((and (number? a) (number? b)) (< a b))
        ((and (string? a) (string? b)) (string<? a b))
        ((and (boolean? a) (boolean? b)) (not (and a (not b))))
        (else (error "Cannot compare values of different types"))))

;funkcja pomocnicza dla sort
(define (compare-lexico vals-a vals-b)
  (cond
    ;nie da się porównać
    ((null? vals-a) #f)
    ;jak są równe
    ((equal? (first vals-a) (first vals-b) ) (compare-lexico (rest vals-a) (rest vals-b) ) )
    ;jak jeden jest mniejszy
    (else (comparator (first vals-a) (first vals-b)))
    )
  )


(define (table-sort cols tab)
  (let ([schema (table-schema tab)]
        [rows (table-rows tab)]
        [keys (filter-cols cols tab)] ;indexy kolumn - kluczy
        )
    ;utworzymy nową tabelę
    (table
     keys
     (sort
      rows
      (lambda (a b)
        ;pobierzemy wartości do porównań
        (let
            ((a-vals (extract-sorting-values a keys))
            (b-vals (extract-sorting-values b keys)))
          (compare-lexico a-vals b-vals)
          )
        )
      )
     )

    )

  )

( table-rows ( table-sort '( country city ) cities ))






