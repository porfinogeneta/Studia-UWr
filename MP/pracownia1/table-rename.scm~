#lang racket



;nazwa i typ danych w kolumnach
(define-struct column-info (name type) #:transparent)

;schema pierwsza lista, rows druga lista
(define-struct table (schema rows) #:transparent)

(define countries
  (table
   (list (column-info 'country 'string)
         (column-info 'population 'number))
   (list (list "Poland" 38)
         (list "Germany" 83)
         (list "France" 67)
         (list "Spain" 47))))

(define cities
  (table
   (list (column-info 'city    'string)
         (column-info 'country 'string)
         (column-info 'area    'number)
         (column-info 'capital 'boolean))
   (list (list "Wrocław" "Poland"  293 #f)
         (list "Warsaw"  "Poland"  517 #t)
         (list "Poznań"  "Poland"  262 #f)
         (list "Berlin"  "Germany" 892 #t)
         (list "Munich"  "Germany" 310 #f)
         (list "Paris"   "France"  105 #t)
         (list "Rennes"  "France"   50 #f))))


(define (table-rename col ncol tab)
  (let ([schema (table-schema tab)]
        [rows (table-rows tab)]
        )
    ;będziemy robić nową tabelkę
    (table (map
            (lambda (c)
              ;jak name aktualnie spr kolumny się pokryje ze zmianą
              (if (eq? (column-info-name c) col)
                  ;zamieniam kolumnę na nową
                  (column-info ncol (column-info-type c))
                  c ;zostawiam starą
                  )
              )
            schema
            )rows )
    )
  )

(table-rename 'area 'pow cities)


 






