#lang racket

; utworzenie narzędzia do typowania
(define (determine-type val)
  (cond
    ((string? val) 'string)
      ((number? val) 'number)
      ((symbol? val) 'symbol)
      (else 'unknown))
  )

; map przekazująca również index wywołania
;tworzy pary f(elem, index) reszta listy
(define (map-index f lst)
  (define (iter i xs acc)
    (if (null? xs)
        ;odracamy akumulator, wtedy elementy będą po kolei
        (reverse acc)
        (iter (+ i 1) (rest xs) (cons (f (first xs) i) acc))
        )
    )
  (iter 0 lst '())
  )

(define (new-row-match? row schema)
  (if (not (equal? (length row) (length schema)))
      #f
      ;sprawdzenie typów
      (andmap (lambda (x) (eq? x #t))
             (map-index
               ;sprawdzam czy typ danych zgadza się z typem na konkretnej pozycji w tabeli
              (lambda (elem index)
                (equal? (determine-type elem) (column-info-type (list-ref schema index))))
              row))))

  

(define (table-insert row tab)
  [let ([schema (table-schema tab)]
        [rows (table-rows tab)]
        )
    (if (new-row-match? row schema)
        (table schema (cons row rows))
        (error "Invalid Input")
        )
    
    ]
  )