#lang racket
(require data/heap)
#;(provide sim? wire?
         (contract-out
          [make-sim        (-> sim?)]
          [sim-wait!       (-> sim? positive? void?)]
          [sim-time        (-> sim? real?)]
          [sim-add-action! (-> sim? positive? (-> any/c) void?)]

          [make-wire       (-> sim? wire?)]
          [wire-on-change! (-> wire? (-> any/c) void?)]
          [wire-value      (-> wire? boolean?)]
          [wire-set!       (-> wire? boolean? void?)]

          [bus-value (-> (listof wire?) natural?)]
          [bus-set!  (-> (listof wire?) natural? void?)]

          [gate-not  (-> wire? wire? void?)]
          [gate-and  (-> wire? wire? wire? void?)]
          [gate-nand (-> wire? wire? wire? void?)]
          [gate-or   (-> wire? wire? wire? void?)]
          [gate-nor  (-> wire? wire? wire? void?)]
          [gate-xor  (-> wire? wire? wire? void?)]

          [wire-not  (-> wire? wire?)]
          [wire-and  (-> wire? wire? wire?)]
          [wire-nand (-> wire? wire? wire?)]
          [wire-or   (-> wire? wire? wire?)]
          [wire-nor  (-> wire? wire? wire?)]
          [wire-xor  (-> wire? wire? wire?)]

          [flip-flop (-> wire? wire? wire? void?)]))

;zarządzanie czasem
(define current-time 0) ;początkowy stan

;ustawienie czasu
(define (set-curr-time new-time)
  (set! current-time new-time)
  )

(struct event (time action) #:transparent) ;definiujemy zdarzenie

(define (compare-events event1 event2) ;porównywator zdarzeń
  (<= (event-time event1) (event-time event2))
  )

;pusty kopiec + funkcja porównująca
(define (event-queue)
  (make-heap compare-events)
  )


;to przesuwanie czasu generuje uruchamianie zdarzeń
;wykonanie wszystkich eventów do danego momentu
;stop-time, kiedy kończymy
(define (execute-events-to stop-time)
  (if (or (> (event-time (heap-min event-queue)) stop-time) (empty? event-queue)) ;jeżeli czas w najmniejszym elemencie kopca jest większy od momentu, kiedy mieliśmy stanąć albo kopiec jest pusty
      void ;kończymy działanie funkcji
      (begin
        (event-action (heap-remove-min! event-queue))
        (execute-events-to stop-time)
      )
      )
  )

;przesunięcie czasu, delta-t o ile przesuwamy
(define (advance-time delta-t)
  (set-curr-time (+ current-time delta-t))
  (execute-events-to current-time)
  )

;dodawanie elementów na linię czasu
;dodanie elementów do kolejki zdarzeń
(define (schedule-event time action)
  (heap-add! event-queue (event time action))
  )


#;(define (bus-set! wires value)
  (match wires
    ['() (void)]
    [(cons w wires)
     (begin
       (wire-set! w (= (modulo value 2) 1))
       (bus-set! wires (quotient value 2)))]))

#;(define (bus-value ws)
  (foldr (lambda (w value) (+ (if (wire-value w) 1 0) (* 2 value)))
         0
         ws))

#;(define (flip-flop out clk data)
  (define sim (wire-sim data))
  (define w1  (make-wire sim))
  (define w2  (make-wire sim))
  (define w3  (wire-nand (wire-and w1 clk) w2))
  (gate-nand w1 clk (wire-nand w2 w1))
  (gate-nand w2 w3 data)
  (gate-nand out w1 (wire-nand out w3)))
