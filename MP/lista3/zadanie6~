#lang racket

;żadna wartość nie może należeć do pustego zbioru, zawsze zwrócimy #f
(define empty-set #f)

empty-set

; sprawdzamy czy liczba podana jako a, należy do naszego singletona
;(define (singleton a)
 ; (lambda (x) (if (equal? x a) (list a ) #f ) )
  ;)
;((singleton 3) 3)
(define (singleton a)
  (lambda (x)
    (if (equal? a x)
        (list x)
        (#f)
        )
    )
  )

((singleton 2) 2)

; czy a należy do s
(define (in a s)
  (cond
    ;jak zbiór jest pusty, to nic w nim nie ma
    ((equal? s empty-set) #f)
    ;jak element jest null to będzie w każdym zbiorze
    ((equal? a empty-set) #t)
    ;zbadanie pierwszego elementu
    ((equal? a (first s) ) #t)
    ;przejście dalej
    (else (in a (rest s) ))
    )
  )

(in 2 (list 1 3 4 5))

;będziemy iterować po t i ewentualnie dodawać elementy z t do s
(define (union s t)
  (define (it s t)
    ;jak s lub t są puste
    (if (null? t)
        s
        (if (null? s)
            t
             ;jak element jest już w liście s
            (if (in (first t) s )
                ;nie dodawaj nic do listy
                (it s (rest t))
                ;łącz listy
                (it (append s (list (first t)) ) (rest t))
                )
            ) 
        )
    )
  (it s t)
  )

(union (list 2 4 5 6) (list 2 4 5 7))

;tworzę pustą listę
;jak element z s jest też w t, to dodaję go do pustej listy
(define (intersect s t)
    (define (it s t helper)
    (if (null? t)
        helper
        (if (in  (first t) s)
            ; jak elementy się pokrywają, dodaję do pomocniczej tablicy i idę dalej po t
            (it s (rest t) (append helper (list (first t) ) ))
            ; idę dalej po t, nic nie dodając do helper'a
            (it s (rest t) helper)
            )
        )   
    )

  ; jak którykolwiek zbiór będzie pusty, to przecięcie także
  (if (or (null? t) (null? s) )
      '()
      ;iteracja do sprawdzenia przecięcia
      (it s t '() )
      )

  )

;(intersect (list 1 2 4 7) (list 2 4 6 8))

;(define (empty-set) 
 ; (lambda (x) #f))

;(define (singleton a)
 ; (lambda (x) (equal? a x)))

;(define (in a s)
 ; (lambda (x) (and (set? x) (set-member? a x))))

;(define (union s t)
; (lambda (x) (or (s x) (t x))))

;(define (intersect s t)
 ; (lambda (x) (and (s x) (t x))))

